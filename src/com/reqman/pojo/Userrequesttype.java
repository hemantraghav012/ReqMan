package com.reqman.pojo;

// Generated 26 Aug, 2017 12:28:54 PM by Hibernate Tools 4.3.1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Userrequesttype generated by hbm2java
 */
@Entity
@Table(name = "userrequesttype", uniqueConstraints = @UniqueConstraint(columnNames = {
		"userid", "requesttypeid" }))
public class Userrequesttype implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 6793209870865522442L;
	private int id;
	private Requesttype requesttype;
	private Users users;
	private Boolean status;
	private Set<Request> requests = new HashSet<Request>(0);

	public Userrequesttype() {
	}

	public Userrequesttype(int id) {
		this.id = id;
	}

	public Userrequesttype(int id, Requesttype requesttype, Users users,
			Boolean status, Set<Request> requests) {
		this.id = id;
		this.requesttype = requesttype;
		this.users = users;
		this.status = status;
		this.requests = requests;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "requesttypeid")
	public Requesttype getRequesttype() {
		return this.requesttype;
	}

	public void setRequesttype(Requesttype requesttype) {
		this.requesttype = requesttype;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "userid")
	public Users getUsers() {
		return this.users;
	}

	public void setUsers(Users users) {
		this.users = users;
	}

	@Column(name = "status")
	public Boolean getStatus() {
		return this.status;
	}

	public void setStatus(Boolean status) {
		this.status = status;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userrequesttype")
	public Set<Request> getRequests() {
		return this.requests;
	}

	public void setRequests(Set<Request> requests) {
		this.requests = requests;
	}

}
